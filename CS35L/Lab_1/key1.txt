1.1
1) 
2) C-s h t m l return
3) C-s s c a v e n return M-b
4) C-s s e l f return M-b
5) C-s a r r return M-b
6) C-e
7) C-a
8,9) I used emacs keyboard shortcuts on my first attempt
10) C-x C-c

1.2
1) 
2) C-u 1 8 C-n C-k C-k
3) C-s D E L C-a C-k C-k
4) C-s w i k i C-s C-s C-a C-p C-u 3 C-k
5) C-s < ! C-M-u C-u 7 C-d C-s < ! C-a C-u 4 C-k C-s < ! C-a C-k

1.3
1) 
2) M-% A s s i g n m e n t SP 1 return A s s i g n m e n t SP 21 SP SP return
3) M-% U T F - 8 return U S - A S C I I return . 
4) C-M-s [ ^ [ : a s c i i : ] ] return C-a C-k
5) C-s < / o l C-n return
6) C-x C-c y

1.4
3,4) 
C-s - < ! C-a C-f C-@ C-e M-w M-< C-s h u n t C-n C-n C-y 
M-< C-s - < ! - - D C-a C-f C-@ C-e M-w M-< C-s E m a c s < / h C-n C-n C-y
M-< C-s - < ! - - SP Y C-a C-f C-@ C-e M-w C-n C-a C-f C-@ C-e M-w C-f C-f C-@ C-e M-w
M-< C-s S u b m i t C-u 4 C-n C-y C-p C-y M-y C-p C-y M-y
M-< C-s - < p C- 1.a C-f C-k C-y C-f C-f C-k C-y C-f C-f C-k C-y C-f C-f C-k C-y C-f C-f C-k C-y
M-< C-s < p > s h C-u 4 C-n C-y C-p C-y M-y C-p C-y M-y C-p C-y M-y C-p C-a C-k C-y C-u 5 M-y
5,6) M-< C-s - - - SP e C-a C-u 5 0 C-k C-_
7) M-< C-s - - - SP e C-p C-e return < ! - - M-% - return = ! M-> - - >
8) M-< M-% < o l > return < o L > 
There are 7 occurrences 

1.5
1) C-x d return + j u n k return
2) f C-x C-f h e l l o . c return
4) M-x c o m p i l e return DEL*10 g c c  SP - o SP h e l l o  SP h e l l o . c return
C-b h e l l o - o u t return M-x . / h e l l o
5) M-< C-@ M-> M-x append-to-file return /u/eng/class/classbuj/Desktop/CS35L/hw1/ke1.txt return

#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';                                             
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b\
 = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b,\
 b, q, n, q, p, q, n, n, n, n);%c  returnurn 0;%c}%c";                             
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);                   
  returnurn 0;                                                                     
}              

1.6
1) C-x b return
2)( r a n d o m SP " 3 0 4 - 9 3 7 - 3 3 4 ) 
Result -2214645996816662858
3) ( s e t q SP x SP ( r a n d o m ) ) C-j
   ( s e t q SP y SP ( r a n d o m ) ) C-j

Result: x = 395688209980456487, y = 1616276570380775597
4) ( * SP x SP y ) C-j
Result : -1354274453749297061
The result cannot be correct because the product of two positive numbers is never negative. This error is the result of overflow. 

5) M - : ( * SP x SP y ) C-j
There is no difference in output

6)
Those two numbers are not truly random because 
1) the same seed leads to the same "random" numbers ever time the program executes.
2) computers are only capable of generating pseudo-random numbers using analytic functions whose periods are very large. However, given a large enough set of inputs, the pattern in the supposedly random function's output would become apparent. 

7) We can deduce from the number of digits of the product that it is represented as a signed quantity using 64 bits (it and 2^63 both have 19 digits). Assuming the function is truly random, the product xy takes on values ranging from approximately -2^126 to 2^126 with equal probability. However, only values between -2^63 and 2^63-1 can be represented. Dividing 2^63/2^126, we find that the chance of this computation being correct is nearly zero and that of overflowing almost 100%. 
